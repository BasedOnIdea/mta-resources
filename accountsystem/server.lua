local playerAccounts = {}local conn = exports.dbmanager:getDbConnection() --here must be check for dbmanager startsetmetatable(conn, { __index = DBManager })local Players = conn:define("players", {	id = {        type = DBManager.INT(11),        primaryKey = true,        autoIncrement = true	},    name = {        type = DBManager.TEXT(),        allowNull = false    },    mail = {        type = DBManager.TEXT(),        allowNull = false    },    login = {        type = DBManager.TEXT(),        allowNull = false    },    password = {        type = DBManager.TEXT(),        allowNull = false    },    regSerial = {        type = DBManager.TEXT(),        allowNull = false    },    loginSerial = {        type = DBManager.TEXT(),        allowNull = false    },    money = {        type = DBManager.INT(11),    },    level = {        type = DBManager.INT(11),    },    donate = {        type = DBManager.INT(11),    },    bankMoney = {        type = DBManager.INT(11),    },    adminLvl = {        type = DBManager.INT(4),    },    vip = {        type = DBManager.INT(1),    },    skin = {        type = DBManager.INT(11),    },	playTime = {        type = DBManager.INT(11),    },	x = {        type = DBManager.INT(11),    },	y = {        type = DBManager.INT(11),    },	z = {        type = DBManager.INT(11),    },	casinoChips = {        type = DBManager.INT(11),    },	mute = {        type = DBManager.INT(11),    },	loged = {        type = DBManager.INT(1),    },	autoLicense = {        type = DBManager.TEXT(),        allowNull = false    },	regDate = {        type = DBManager.INT(11),    },	regIP = {        type = DBManager.TEXT(64),    },	loginIP = {        type = DBManager.TEXT(64),    },})Players:sync()addEventHandler("onPlayerChangeNick",getRootElement(),function()	cancelEvent()end)--serial repeat checkaddEventHandler("onPlayerConnect",getRootElement(),function(pName,pIP,pUSername,pSerial)	for i,v in ipairs(getElementsByType("player")) do		if getPlayerSerial(v) == pSerial then			cancelEvent(true, "Serial in use")		end	endend)--Validate player nicknameinvalidChars = {}for i = 33, 39 doinvalidChars[i] = trueendfor i = 40, 43 doinvalidChars[i] = trueendinvalidChars[47] = truefor i = 58, 64 doinvalidChars[i] = trueendinvalidChars[92] = trueinvalidChars[94] = trueinvalidChars[96] = truefor i = 123, 126 doinvalidChars[i] = trueendfunction hasInvalidChar ( player )	name = getPlayerName ( player )	for i, index in pairs ( invalidChars ) do		if not gettok ( name, 1, i ) or gettok ( name, 1, i ) ~= name then			return true		end	end	return falseend--nickname validationaddEventHandler("onPlayerJoin",getRootElement(),function()	if hasInvalidChar(source) then		kickPlayer ( source, "Your name contains invalid characters!" )	endend)local Ban = conn:define("ban", {	id = {        type = DBManager.INT(11),        primaryKey = true,        autoIncrement = true	},	name = {		type = DBManager.TEXT(),		allowNull = false	},	playerID = {		type = DBManager.INT(11)	},	serial = {		type = DBManager.TEXT(),		allowNull = false	},	timestamp = {		type = DBManager.INT(11)	},	reason = {		type = DBManager.TEXT(),		allowNull = false	}})Ban:sync()--Check player ban statusaddEventHandler("onPlayerConnect",getRootElement(),function(pName,pIP,pUSername,pSerial)	local result = Ban:findOne({ where = { serial = pSerial } })	if result then		if tonumber(result["timestamp"]) > getTimestamp() then			local timeLeft = tonumber(result["timestamp"]) - getTimestamp()			cancelEvent(true,"Вы забанены! Оставшееся время: "..timeLeft.."("..result["reason"]..")")		end	endend)function reg(pl, nickname, login, pass, refpass, mail)	if not nickname or nickname == "" then		errormsg (pl, "Введите никнейм")		return	end		if not login or login == "" then		errormsg (pl, "Введите логин")		return	end		if not pass or pass == "" then		errormsg (pl, "Введите пароль")		return	end
	if not refpass or refpass == "" then		errormsg (pl, "Подтвердите пароль")		return	end
	if not mail or mail == "" then		errormsg (pl, "Введите E-mail")		return
	end		if pass ~= refpass then		errormsg (pl, "Пароли не совпадают!")		return	end		local result = Players:findAll({where = {login = login}})	if not result then		errormsg (pl, "Такой аккаунт\nуже существует!")		return	end
	if not isMailCheck (mail) then		errormsg (pl, "Не верный E-mail!")		return	end
	-- if not isMailValidate (mail) then		-- errormsg (pl, "Данный E-mail уже занят!")		-- return	-- end	    local name = nickname    local regSerial = getPlayerSerial(pl)    local loginSerial = getPlayerSerial(pl)    local money = 0    local level = 0    local donate = 0    local bankMoney = 0    local adminLvl = 0    local vip = 0    local skin = 7	local playTime = 0	local x = 2003.62	local y = 1545	local z = 13.59	local casinoChips = 0	local mute = 0	local loged = 0	local autoLicense = "{}"	local regDate = getTimestamp()	local regIP = getPlayerIP(pl)	local loginIP = getPlayerIP(pl)		Players:create({ name = name, login = login, mail = mail, password = pass, regSerial = regSerial, loginSerial = loginSerial,					money = money, level = level, donate = donate, bankMoney = bankMoney, adminLvl = adminLvl, vip = vip, 					skin = skin, playTime = playTime, x = x, y = y, z = z, casinoChips = casinoChips, mute = mute, loged = loged, 					autoLicense = autoLicense, regDate = regDate, regIP = regIP, loginIP = loginIP })
	errormsg (pl, "Аккаунт создан.", "ok")endaddEvent ("login:register", true)addEventHandler ("login:register", resourceRoot, reg)
addEventHandler ("onResourceStart", resourceRoot, function()	setTimer(function()		for i, v in ipairs(getElementsByType("player")) do			if not getElementData (v, "login.nickname") then				triggerClientEvent (v, "login:createPanel", resourceRoot)			end		end	end, 100, 1)end)
function login(pl, user, pass)	if not user or user == "" then		errormsg (pl, "Введите логин")		return	end
	if not pass or pass == "" then		errormsg (pl, "Введите пароль")		return	end	result = Players:findOne({ where = { login = user, password = pass} })	if not result then		errormsg (pl, "Неправильный пароль\n или имя пользователя.")		return	end	Players:update({ loged = 1, loginIP = getPlayerIP(pl), loginSerial = getPlayerSerial(pl) }, { where = { login = user } })		triggerClientEvent (pl, "login:hidePanel", resourceRoot)	-- triggerClientEvent (pl, "onPlayerLogin", root)		setElementData(pl, "login.nickname", result.name)	setElementData(pl, "login.id", result.id)	setPlayerMoney(pl, result.money)	setElementData(pl, "casinoChips", result.casinoChips)	setElementData(pl, "level", result.level)	setElementData(pl, "autoLicense", result.autoLicense)	setElementData(pl, "donate", result.donate)	setElementData(pl, "vip", result.vip)	setElementData(pl, "bankMoney", result.bankMoney)	setElementData(pl, "loged", true)	setElementData(pl, "carlimit", exports.houses:getCarLimit(result.id))	setElementModel(pl, tonumber(result.skin))	-- setElementPosition(pl, result.x, result.y, result.z)	setElementPosition(pl, 160, -170, 1.578)			onLogin (pl, result.name, pass)endaddEvent ("login:login", true)addEventHandler ("login:login", resourceRoot, login)addEventHandler("onPlayerQuit", root, function()	if getElementData(source, "login.nickname") then		local user = getElementData(source, "login.nickname")		local x,y,z = getElementPosition(source)			Players:update({ loged = 0, x = x, y = y, z = z, money = getPlayerMoney(source) }, { where = { name = user } })	endend)function getPlayerNameByID(playerID)	playerID = tonumber(playerID)	if playerID then		local r = Players:findOne({ where = { id = playerID } })		if r then			return r.name		else			return "none"		end	else		return "none"	endend